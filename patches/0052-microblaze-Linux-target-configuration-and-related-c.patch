From 0ea3e08e3202bb41900302b966fa67caf8f117ea Mon Sep 17 00:00:00 2001
Message-Id: <0ea3e08e3202bb41900302b966fa67caf8f117ea.1241484431.git.john.williams@petalogix.com>
In-Reply-To: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
References: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
From: John Williams <john.williams@petalogix.com>
Date: Tue, 28 Apr 2009 14:40:13 +1000
Subject: [PATCH 52/63] microblaze: Linux target configuration and related changes

---
 gcc/config.gcc                  |   12 +++++++
 gcc/config/microblaze/linux.h   |   66 ++++++++++++++++++++++++++++++++++++++
 gcc/config/microblaze/uclinux.h |   67 +++++++++++++++++++++++++++++++++++++++
 3 files changed, 145 insertions(+), 0 deletions(-)
 create mode 100644 gcc/config/microblaze/linux.h
 create mode 100644 gcc/config/microblaze/uclinux.h

diff --git a/gcc/config.gcc b/gcc/config.gcc
index 8ca18d6..d781629 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -1448,6 +1448,18 @@ mcore-*-pe*)
 	tmake_file=mcore/t-mcore-pe
 	use_fixproto=yes
 	;;
+microblaze*-linux*)
+	tm_file="microblaze/microblaze.h dbxelf.h linux.h microblaze/linux.h"
+	tmake_file="t-slibgcc-elf-ver t-slibgcc-nolc-override t-linux microblaze/t-microblaze"
+       extra_parts="crtbegin.o crtbeginS.o crtend.o crtendS.o crtbeginT.o"
+	use_fixproto=no
+	;;
+microblaze*-uclinux*)
+	tm_file="microblaze/microblaze.h dbxelf.h microblaze/uclinux.h"
+	tmake_file="microblaze/t-microblaze"
+       extra_parts="crtbegin.o crtbeginS.o crtend.o crtendS.o crtbeginT.o"
+	use_fixproto=no
+	;;
 microblaze*-*-*)
         tm_file="dbxelf.h microblaze/microblaze.h"
         tmake_file=microblaze/t-microblaze
diff --git a/gcc/config/microblaze/linux.h b/gcc/config/microblaze/linux.h
new file mode 100644
index 0000000..4de26de
--- /dev/null
+++ b/gcc/config/microblaze/linux.h
@@ -0,0 +1,66 @@
+
+#define SYSROOT_SUFFIX_SPEC ""
+#define SYSROOT_HEADERS_SUFFIX_SPEC ""
+
+/* Redefine the entire default search path for include files so that
+   it will be generated by compiler dynamically on base of the compiler's
+   binary location. */
+#undef INCLUDE_DEFAULTS
+#define INCLUDE_DEFAULTS                                       \
+  {                                                            \
+    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1, 1 },                 \
+    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1, 1 },            \
+    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1, 1 },        \
+    { GCC_INCLUDE_DIR, "GCC", 0, 0, 0 },                       \
+    { TOOL_INCLUDE_DIR, "BINUTILS", 0, 0, 0 },                 \
+    { "/usr/include", 0, 0, 1, 1 },                            \
+    { 0, 0, 0, 0, 0 }                                          \
+  }
+
+/* Define the macro to 1 to enable changes made in the gcc.c file
+   to exclude host library directories such as /lib and /libexec from the
+   default search path for libraries. */
+#define TARGET_SYSTEM_ROOT_RELOCATABLE_ONLY 1
+
+/* Linux and BlueCat-specific declarations */
+#undef  TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()          \
+  do                                      \
+    {                                     \
+      LINUX_TARGET_OS_CPP_BUILTINS();     \
+      if (flag_pic)                       \
+        {                                 \
+          builtin_define ("__PIC__");     \
+          builtin_define ("__pic__");     \
+        }                                 \
+    }                                     \
+  while (0)
+
+
+/* Target CPU builtins */
+#undef TARGET_CPU_CPP_BUILTINS
+#define TARGET_CPU_CPP_BUILTINS()				\
+  do								\
+    {								\
+        builtin_define ("_BIG_ENDIAN");                         \
+        builtin_define ("__MICROBLAZE__");                      \
+        builtin_define ("__microblaze__");                      \
+                                                                \
+        builtin_assert ("cpu=microblaze");                      \
+        builtin_assert ("machine=microblaze");                  \
+} while (0)
+
+
+#define DYNAMIC_LINKER "/lib/ld.so.1"
+#undef  SUBTARGET_EXTRA_SPECS
+#define SUBTARGET_EXTRA_SPECS \
+  { "dynamic_linker", DYNAMIC_LINKER }
+
+#undef LINK_SPEC
+#define LINK_SPEC "%{shared:-shared} \
+  %{!shared: \
+    %{!static: \
+      %{rdynamic:-export-dynamic} \
+      %{!dynamic-linker:-dynamic-linker %(dynamic_linker)}} \
+    %{static:-static}}"
+
diff --git a/gcc/config/microblaze/uclinux.h b/gcc/config/microblaze/uclinux.h
new file mode 100644
index 0000000..bfbabf0
--- /dev/null
+++ b/gcc/config/microblaze/uclinux.h
@@ -0,0 +1,67 @@
+
+#define SYSROOT_SUFFIX_SPEC ""
+#define SYSROOT_HEADERS_SUFFIX_SPEC ""
+
+/* Redefine the entire default search path for include files so that
+   it will be generated by compiler dynamically on base of the compiler's
+   binary location. */
+#undef INCLUDE_DEFAULTS
+#define INCLUDE_DEFAULTS                                       \
+  {                                                            \
+    { GPLUSPLUS_INCLUDE_DIR, "G++", 1, 1, 1 },                 \
+    { GPLUSPLUS_TOOL_INCLUDE_DIR, "G++", 1, 1, 1 },            \
+    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, "G++", 1, 1, 1 },        \
+    { GCC_INCLUDE_DIR, "GCC", 0, 0, 0 },                       \
+    { TOOL_INCLUDE_DIR, "BINUTILS", 0, 0, 0 },                 \
+    { "/usr/include", 0, 0, 1, 1 },                            \
+    { 0, 0, 0, 0, 0 }                                          \
+  }
+
+/* Define the macro to 1 to enable changes made in the gcc.c file
+   to exclude host library directories such as /lib and /libexec from the
+   default search path for libraries. */
+#define TARGET_SYSTEM_ROOT_RELOCATABLE_ONLY 1
+
+/* Bring in standard linux defines */
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()        \
+    do                        \
+{                       \
+    builtin_define ("__uClinux__");     \
+    builtin_define_std ("linux");       \
+    builtin_define_std ("unix");        \
+    builtin_define ("__gnu_linux__");   \
+    builtin_assert ("system=linux");    \
+    builtin_assert ("system=posix");    \
+}                       \
+while (0)
+
+
+/* Target CPU builtins */
+#undef TARGET_CPU_CPP_BUILTINS
+#define TARGET_CPU_CPP_BUILTINS()				\
+  do								\
+    {								\
+        builtin_define ("_BIG_ENDIAN");                         \
+        builtin_define ("__MICROBLAZE__");                      \
+        builtin_define ("__microblaze__");                      \
+                                                                \
+        builtin_assert ("cpu=microblaze");                      \
+        builtin_assert ("machine=microblaze");                  \
+} while (0)
+
+
+/* Don't set the target flags, this is done by the linker script */
+#undef LIB_SPEC
+#define LIB_SPEC "-elf2flt -lc"
+#undef  STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "crt1%O%s crti%O%s crtbegin%O%s"
+
+#undef  ENDFILE_SPEC
+#define ENDFILE_SPEC \
+  "crtend%O%s crtn%O%s"
+
+/* Use default link spec, not that specified in microblaze.h */
+#undef  LINK_SPEC
+
-- 
1.5.3.8

