From 87ce130e7964f1b448755dd48764c64aea16cc61 Mon Sep 17 00:00:00 2001
Message-Id: <87ce130e7964f1b448755dd48764c64aea16cc61.1241484432.git.john.williams@petalogix.com>
In-Reply-To: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
References: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
From: John Williams <john.williams@petalogix.com>
Date: Tue, 28 Apr 2009 14:40:19 +1000
Subject: [PATCH 56/63] microblaze: Fix bug with __divsi3 and clean up code/comments

---
 gcc/config/microblaze/divsi3.asm  |   85 +++++++++++++++++----------------
 gcc/config/microblaze/udivsi3.asm |   94 ++++++++++++++++++------------------
 2 files changed, 91 insertions(+), 88 deletions(-)

diff --git a/gcc/config/microblaze/divsi3.asm b/gcc/config/microblaze/divsi3.asm
index 842ba95..d38fd75 100644
--- a/gcc/config/microblaze/divsi3.asm
+++ b/gcc/config/microblaze/divsi3.asm
@@ -7,8 +7,8 @@
 # divsi3.asm 
 # 
 # Divide operation for 32 bit integers.
-#	Input :	Divisor in Reg r5
-#		Dividend in Reg r6
+#	Input :	Dividend in Reg r5
+#		Divisor in Reg r6
 #	Output: Result in Reg r3
 # 
 # $Header: /devl/xcs/repo/env/Jobs/MDT/sw/ThirdParty/gnu/src/gcc/src-3.4/gcc/config/microblaze/divsi3.s,v 1.1.2.6 2005/11/15 23:32:46 salindac Exp $
@@ -20,55 +20,58 @@
 __divsi3:
 	.frame	r1,0,r15	
 
-	addik r1,r1,-16
-	swi r28,r1,0
-	swi r29,r1,4
-	swi r30,r1,8
-	swi r31,r1,12
+	ADDIK   r1,r1,-16
+	SWI     r28,r1,0
+	SWI     r29,r1,4
+	SWI     r30,r1,8
+	SWI     r31,r1,12
 
-	BEQI r6,$LaDiv_By_Zero       # Div_by_Zero   # Division Error
-	BEQI r5,$LaResult_Is_Zero  # Result is Zero 
-	BGEId r5,$LaR5_Pos 
-	XOR  r28,r5,r6  # Get the sign of the result
-	RSUBI r5,r5,0	    # Make r5 positive
+	BEQI    r6,$LaDiv_By_Zero       # Div_by_Zero   # Division Error
+	BEQI    r5,$LaResult_Is_Zero    # Result is Zero 
+	BGEID   r5,$LaR5_Pos 
+	XOR     r28,r5,r6               # Get the sign of the result
+	RSUBI   r5,r5,0                 # Make r5 positive
 $LaR5_Pos:
-	BGEI r6,$LaR6_Pos
-	RSUBI r6,r6,0	    # Make r6 positive
+	BGEI    r6,$LaR6_Pos
+	RSUBI   r6,r6,0                 # Make r6 positive
 $LaR6_Pos:
-	ADDIK r30,r0,0     # Clear mod
-	ADDIK r3,r0,0     # clear div
-	ADDIK r29,r0,32  # Initialize the loop count
-   # First part try to find the first '1' in the r5
+	ADDIK   r30,r0,0                # Clear mod
+	ADDIK   r3,r0,0                 # clear div
+	ADDIK   r29,r0,32               # Initialize the loop count
+
+        # First part try to find the first '1' in the r5
+$LaDIV0: 
+        BLTI    r5,$LaDIV2              # This traps r5 == 0x80000000 
 $LaDIV1:
-	ADD r5,r5,r5     # left shift logical r5
-	BGEID r5,$LaDIV1       #
-	ADDIK r29,r29,-1
+	ADD     r5,r5,r5                # left shift logical r5
+	BGTID   r5,$LaDIV1       
+	ADDIK   r29,r29,-1
 $LaDIV2:
-	ADD r5,r5,r5     # left shift logical  r5 get the '1' into the Carry
-	ADDC r30,r30,r30 # Move that bit into the Mod register
-	rSUB r31,r6,r30 # Try to subtract (r30 a r6)
-	BLTi r31,$LaMOD_TOO_SMALL
-	OR  r30,r0,r31  # Move the r31 to mod since the result was positive
-	ADDIK r3,r3,1
+	ADD     r5,r5,r5                # left shift logical  r5 get the '1' into the Carry
+	ADDC    r30,r30,r30             # Move that bit into the Mod register
+	RSUB    r31,r6,r30              # Try to subtract (r30 a r6)
+	BLTI    r31,$LaMOD_TOO_SMALL
+	OR      r30,r0,r31              # Move the r31 to mod since the result was positive
+	ADDIK   r3,r3,1
 $LaMOD_TOO_SMALL:
-	ADDIK r29,r29,-1
-	BEQi r29,$LaLOOP_END
-	ADD r3,r3,r3 # Shift in the '1' into div
-	BRI $LaDIV2   # Div2
+	ADDIK   r29,r29,-1
+	BEQi    r29,$LaLOOP_END
+	ADD     r3,r3,r3                # Shift in the '1' into div
+	BRI     $LaDIV2                 # Div2
 $LaLOOP_END:
-	BGEI r28,$LaRETURN_HERE
-	BRId $LaRETURN_HERE
-	rsubi r3,r3,0 # Negate the result
+	BGEI    r28,$LaRETURN_HERE
+	BRID    $LaRETURN_HERE
+	RSUBI   r3,r3,0                 # Negate the result
 $LaDiv_By_Zero:
 $LaResult_Is_Zero:
-	or r3,r0,r0 # set result to 0
+	OR      r3,r0,r0 # set result to 0
 $LaRETURN_HERE:
 # Restore values of CSRs and that of r3 and the divisor and the dividend
-	lwi r28,r1,0
-	lwi r29,r1,4
-	lwi r30,r1,8
-	lwi r31,r1,12
-	rtsd r15,8
-	addik r1,r1,16
+	LWI     r28,r1,0
+	LWI     r29,r1,4
+	LWI     r30,r1,8
+	LWI     r31,r1,12
+	RTSD    r15,8
+	ADDIK   r1,r1,16
 .end __divsi3
 	
diff --git a/gcc/config/microblaze/udivsi3.asm b/gcc/config/microblaze/udivsi3.asm
index 944245e..02bf9f3 100644
--- a/gcc/config/microblaze/udivsi3.asm
+++ b/gcc/config/microblaze/udivsi3.asm
@@ -20,66 +20,66 @@
 __udivsi3:
 	.frame	r1,0,r15	
 
-	addik r1,r1,-12
-	swi r29,r1,0
-	swi r30,r1,4
-	swi r31,r1,8
+	ADDIK   r1,r1,-12
+    	SWI     r29,r1,0
+	SWI     r30,r1,4
+	SWI     r31,r1,8
 
-	BEQI r6,$LaDiv_By_Zero         # Div_by_Zero   # Division Error
-	BEQId r5,$LaResult_Is_Zero     # Result is Zero 
-	ADDIK r30,r0,0                  # Clear mod
-	ADDIK r29,r0,32  # Initialize the loop count
+	BEQI    r6,$LaDiv_By_Zero           # Div_by_Zero   # Division Error
+	BEQID   r5,$LaResult_Is_Zero        # Result is Zero 
+	ADDIK   r30,r0,0                    # Clear mod
+	ADDIK   r29,r0,32                   # Initialize the loop count
 
-# Check if r6 and r5 are equal # if yes, return 1
-	rsub 	r18,r5,r6
-	beqid	r18,$LaRETURN_HERE
-	addik	r3,r0,1
+        # Check if r6 and r5 are equal # if yes, return 1
+	RSUB 	r18,r5,r6
+	BEQID	r18,$LaRETURN_HERE
+	ADDIK	r3,r0,1
 
-# Check if (uns)r6 is greater than (uns)r5. In that case, just return 0
-	xor	r18,r5,r6
-	bgeid	r18,16
-	add	r3,r0,r0  		# We would anyways clear r3
-	blti	r6,$LaRETURN_HERE       # r6[bit 31 = 1] hence is greater
-	bri	$LCheckr6
-	rsub	r18,r6,r5 # MICROBLAZEcmp
-	blti	r18,$LaRETURN_HERE
+        # Check if (uns)r6 is greater than (uns)r5. In that case, just return 0
+	XOR	r18,r5,r6
+	BGEID	r18,16
+	ADD	r3,r0,r0                    # We would anyways clear r3
+	BLTI	r6,$LaRETURN_HERE           # r6[bit 31 = 1] hence is greater
+	BRI	$LCheckr6
+	RSUB	r18,r6,r5                   # MICROBLAZEcmp
+	BLTI	r18,$LaRETURN_HERE
 
-# If r6 [bit 31] is set, then return result as 1
+        # If r6 [bit 31] is set, then return result as 1
 $LCheckr6:
-	bgti	r6,$LaDIV0
-	brid	$LaRETURN_HERE
-	addik	r3,r0,1
+	BGTI	r6,$LaDIV0
+	BRID	$LaRETURN_HERE
+	ADDIK	r3,r0,1
 
-   # First part try to find the first '1' in the r5
+        # First part try to find the first '1' in the r5
 $LaDIV0:
-	BLTI r5,$LaDIV2	
+	BLTI    r5,$LaDIV2	
 $LaDIV1:
-	ADD r5,r5,r5     # left shift logical r5
-	BGEID r5,$LaDIV1       #
-	ADDIK r29,r29,-1
+	ADD     r5,r5,r5                    # left shift logical r5
+	BGTID   r5,$LaDIV1       
+	ADDIK   r29,r29,-1
 $LaDIV2:
-	ADD r5,r5,r5     # left shift logical  r5 get the '1' into the Carry
-	ADDC r30,r30,r30 # Move that bit into the Mod register
-	rSUB r31,r6,r30 # Try to subtract (r30 a r6)
-	BLTi r31,$LaMOD_TOO_SMALL
-	OR  r30,r0,r31  # Move the r31 to mod since the result was positive
-	ADDIK r3,r3,1
+	ADD     r5,r5,r5                    # left shift logical  r5 get the '1' into the Carry
+	ADDC    r30,r30,r30                 # Move that bit into the Mod register
+	RSUB    r31,r6,r30                  # Try to subtract (r30 a r6)
+    	BLTI    r31,$LaMOD_TOO_SMALL
+	OR      r30,r0,r31                  # Move the r31 to mod since the result was positive
+	ADDIK   r3,r3,1
 $LaMOD_TOO_SMALL:
-	ADDIK r29,r29,-1
-	BEQi r29,$LaLOOP_END
-	ADD r3,r3,r3 # Shift in the '1' into div
-	BRI $LaDIV2   # Div2
+	ADDIK   r29,r29,-1
+	BEQi    r29,$LaLOOP_END
+	ADD     r3,r3,r3 # Shift in the '1' into div
+	BRI     $LaDIV2   # Div2
 $LaLOOP_END:
-	BRI $LaRETURN_HERE
+	BRI     $LaRETURN_HERE
 $LaDiv_By_Zero:
 $LaResult_Is_Zero:
-	or r3,r0,r0 # set result to 0
+	OR      r3,r0,r0 # set result to 0
 $LaRETURN_HERE:
-# Restore values of CSRs and that of r3 and the divisor and the dividend
-	lwi r29,r1,0
-	lwi r30,r1,4
-	lwi r31,r1,8
-	rtsd r15,8
-	addik r1,r1,12
+        # Restore values of CSRs and that of r3 and the divisor and the dividend
+	LWI     r29,r1,0
+	LWI     r30,r1,4
+	LWI     r31,r1,8
+	RTSD    r15,8
+	ADDIK   r1,r1,12
         .end __udivsi3
 	
-- 
1.5.3.8

