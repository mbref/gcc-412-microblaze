From 284d8c919ba31fe23d402d6ed95288739866a10c Mon Sep 17 00:00:00 2001
Message-Id: <284d8c919ba31fe23d402d6ed95288739866a10c.1241484432.git.john.williams@petalogix.com>
In-Reply-To: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
References: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
From: John Williams <john.williams@petalogix.com>
Date: Tue, 28 Apr 2009 14:40:23 +1000
Subject: [PATCH 59/63] microblaze: Added .type/size directives for libgcc functions

---
 gcc/config/microblaze/divsi3.asm       |    4 +-
 gcc/config/microblaze/divsi3.asm.orig  |   77 +++++++++++++++++++++++++++++
 gcc/config/microblaze/modsi3.asm       |    4 +-
 gcc/config/microblaze/mulsi3.asm       |    3 +-
 gcc/config/microblaze/udivsi3.asm      |    3 +-
 gcc/config/microblaze/udivsi3.asm.orig |   85 ++++++++++++++++++++++++++++++++
 gcc/config/microblaze/umodsi3.asm      |    3 +-
 7 files changed, 174 insertions(+), 5 deletions(-)
 create mode 100644 gcc/config/microblaze/divsi3.asm.orig
 create mode 100644 gcc/config/microblaze/udivsi3.asm.orig

diff --git a/gcc/config/microblaze/divsi3.asm b/gcc/config/microblaze/divsi3.asm
index d38fd75..3cd87ba 100644
--- a/gcc/config/microblaze/divsi3.asm
+++ b/gcc/config/microblaze/divsi3.asm
@@ -17,6 +17,7 @@
 	
 	.globl	__divsi3
 	.ent	__divsi3
+	.type	__divsi3,@function
 __divsi3:
 	.frame	r1,0,r15	
 
@@ -74,4 +75,5 @@ $LaRETURN_HERE:
 	RTSD    r15,8
 	ADDIK   r1,r1,16
 .end __divsi3
-	
+	.size	__divsi3, . - __divsi3
+
diff --git a/gcc/config/microblaze/divsi3.asm.orig b/gcc/config/microblaze/divsi3.asm.orig
new file mode 100644
index 0000000..d38fd75
--- /dev/null
+++ b/gcc/config/microblaze/divsi3.asm.orig
@@ -0,0 +1,77 @@
+###################################-*-asm*- 
+# 
+# Copyright (c) 2001 Xilinx, Inc.  All rights reserved. 
+# 
+# Xilinx, Inc. CONFIDENTIAL 
+# 
+# divsi3.asm 
+# 
+# Divide operation for 32 bit integers.
+#	Input :	Dividend in Reg r5
+#		Divisor in Reg r6
+#	Output: Result in Reg r3
+# 
+# $Header: /devl/xcs/repo/env/Jobs/MDT/sw/ThirdParty/gnu/src/gcc/src-3.4/gcc/config/microblaze/divsi3.s,v 1.1.2.6 2005/11/15 23:32:46 salindac Exp $
+# 
+#######################################
+	
+	.globl	__divsi3
+	.ent	__divsi3
+__divsi3:
+	.frame	r1,0,r15	
+
+	ADDIK   r1,r1,-16
+	SWI     r28,r1,0
+	SWI     r29,r1,4
+	SWI     r30,r1,8
+	SWI     r31,r1,12
+
+	BEQI    r6,$LaDiv_By_Zero       # Div_by_Zero   # Division Error
+	BEQI    r5,$LaResult_Is_Zero    # Result is Zero 
+	BGEID   r5,$LaR5_Pos 
+	XOR     r28,r5,r6               # Get the sign of the result
+	RSUBI   r5,r5,0                 # Make r5 positive
+$LaR5_Pos:
+	BGEI    r6,$LaR6_Pos
+	RSUBI   r6,r6,0                 # Make r6 positive
+$LaR6_Pos:
+	ADDIK   r30,r0,0                # Clear mod
+	ADDIK   r3,r0,0                 # clear div
+	ADDIK   r29,r0,32               # Initialize the loop count
+
+        # First part try to find the first '1' in the r5
+$LaDIV0: 
+        BLTI    r5,$LaDIV2              # This traps r5 == 0x80000000 
+$LaDIV1:
+	ADD     r5,r5,r5                # left shift logical r5
+	BGTID   r5,$LaDIV1       
+	ADDIK   r29,r29,-1
+$LaDIV2:
+	ADD     r5,r5,r5                # left shift logical  r5 get the '1' into the Carry
+	ADDC    r30,r30,r30             # Move that bit into the Mod register
+	RSUB    r31,r6,r30              # Try to subtract (r30 a r6)
+	BLTI    r31,$LaMOD_TOO_SMALL
+	OR      r30,r0,r31              # Move the r31 to mod since the result was positive
+	ADDIK   r3,r3,1
+$LaMOD_TOO_SMALL:
+	ADDIK   r29,r29,-1
+	BEQi    r29,$LaLOOP_END
+	ADD     r3,r3,r3                # Shift in the '1' into div
+	BRI     $LaDIV2                 # Div2
+$LaLOOP_END:
+	BGEI    r28,$LaRETURN_HERE
+	BRID    $LaRETURN_HERE
+	RSUBI   r3,r3,0                 # Negate the result
+$LaDiv_By_Zero:
+$LaResult_Is_Zero:
+	OR      r3,r0,r0 # set result to 0
+$LaRETURN_HERE:
+# Restore values of CSRs and that of r3 and the divisor and the dividend
+	LWI     r28,r1,0
+	LWI     r29,r1,4
+	LWI     r30,r1,8
+	LWI     r31,r1,12
+	RTSD    r15,8
+	ADDIK   r1,r1,16
+.end __divsi3
+	
diff --git a/gcc/config/microblaze/modsi3.asm b/gcc/config/microblaze/modsi3.asm
index 30c5d47..e94513e 100644
--- a/gcc/config/microblaze/modsi3.asm
+++ b/gcc/config/microblaze/modsi3.asm
@@ -17,6 +17,7 @@
 
 	.globl	__modsi3
 	.ent	__modsi3
+	.type	__modsi3,@function
 __modsi3:
 	.frame	r1,0,r15	
 
@@ -71,4 +72,5 @@ $LaRETURN_HERE:
 	rtsd	r15,8
 	addik	r1,r1,16
         .end __modsi3
-	
+	.size	__modsi3, . - __modsi3
+
diff --git a/gcc/config/microblaze/mulsi3.asm b/gcc/config/microblaze/mulsi3.asm
index 12ee141..1ad2b56 100644
--- a/gcc/config/microblaze/mulsi3.asm
+++ b/gcc/config/microblaze/mulsi3.asm
@@ -17,6 +17,7 @@
 
 	.globl	__mulsi3
 	.ent	__mulsi3
+	.type	__mulsi3,@function
 __mulsi3:
 	.frame	r1,0,r15
 	add	r3,r0,r0
@@ -48,4 +49,4 @@ $L_Result_Is_Zero:
 	rtsd	r15,8
 	addi	r3,r0,0
 	.end __mulsi3
-	
\ No newline at end of file
+	.size	__mulsi3, . - __mulsi3
diff --git a/gcc/config/microblaze/udivsi3.asm b/gcc/config/microblaze/udivsi3.asm
index 02bf9f3..2b97e63 100644
--- a/gcc/config/microblaze/udivsi3.asm
+++ b/gcc/config/microblaze/udivsi3.asm
@@ -17,6 +17,7 @@
 	
 	.globl	__udivsi3
 	.ent	__udivsi3
+	.type	__udivsi3,@function
 __udivsi3:
 	.frame	r1,0,r15	
 
@@ -82,4 +83,4 @@ $LaRETURN_HERE:
 	RTSD    r15,8
 	ADDIK   r1,r1,12
         .end __udivsi3
-	
+	.size	__udivsi3, . - __udivsi3
diff --git a/gcc/config/microblaze/udivsi3.asm.orig b/gcc/config/microblaze/udivsi3.asm.orig
new file mode 100644
index 0000000..02bf9f3
--- /dev/null
+++ b/gcc/config/microblaze/udivsi3.asm.orig
@@ -0,0 +1,85 @@
+###################################-*-asm*- 
+# 
+# Copyright (c) 2001 Xilinx, Inc.  All rights reserved. 
+# 
+# Xilinx, Inc. CONFIDENTIAL 
+# 
+# udivsi3.asm 
+# 
+# Unsigned divide operation.
+#	Input :	Divisor in Reg r5
+#		Dividend in Reg r6
+#	Output: Result in Reg r3
+# 
+# $Header: /devl/xcs/repo/env/Jobs/MDT/sw/ThirdParty/gnu/src/gcc/src-3.4/gcc/config/microblaze/udivsi3.s,v 1.1.2.6 2005/11/15 23:32:47 salindac Exp $
+# 
+#######################################
+	
+	.globl	__udivsi3
+	.ent	__udivsi3
+__udivsi3:
+	.frame	r1,0,r15	
+
+	ADDIK   r1,r1,-12
+    	SWI     r29,r1,0
+	SWI     r30,r1,4
+	SWI     r31,r1,8
+
+	BEQI    r6,$LaDiv_By_Zero           # Div_by_Zero   # Division Error
+	BEQID   r5,$LaResult_Is_Zero        # Result is Zero 
+	ADDIK   r30,r0,0                    # Clear mod
+	ADDIK   r29,r0,32                   # Initialize the loop count
+
+        # Check if r6 and r5 are equal # if yes, return 1
+	RSUB 	r18,r5,r6
+	BEQID	r18,$LaRETURN_HERE
+	ADDIK	r3,r0,1
+
+        # Check if (uns)r6 is greater than (uns)r5. In that case, just return 0
+	XOR	r18,r5,r6
+	BGEID	r18,16
+	ADD	r3,r0,r0                    # We would anyways clear r3
+	BLTI	r6,$LaRETURN_HERE           # r6[bit 31 = 1] hence is greater
+	BRI	$LCheckr6
+	RSUB	r18,r6,r5                   # MICROBLAZEcmp
+	BLTI	r18,$LaRETURN_HERE
+
+        # If r6 [bit 31] is set, then return result as 1
+$LCheckr6:
+	BGTI	r6,$LaDIV0
+	BRID	$LaRETURN_HERE
+	ADDIK	r3,r0,1
+
+        # First part try to find the first '1' in the r5
+$LaDIV0:
+	BLTI    r5,$LaDIV2	
+$LaDIV1:
+	ADD     r5,r5,r5                    # left shift logical r5
+	BGTID   r5,$LaDIV1       
+	ADDIK   r29,r29,-1
+$LaDIV2:
+	ADD     r5,r5,r5                    # left shift logical  r5 get the '1' into the Carry
+	ADDC    r30,r30,r30                 # Move that bit into the Mod register
+	RSUB    r31,r6,r30                  # Try to subtract (r30 a r6)
+    	BLTI    r31,$LaMOD_TOO_SMALL
+	OR      r30,r0,r31                  # Move the r31 to mod since the result was positive
+	ADDIK   r3,r3,1
+$LaMOD_TOO_SMALL:
+	ADDIK   r29,r29,-1
+	BEQi    r29,$LaLOOP_END
+	ADD     r3,r3,r3 # Shift in the '1' into div
+	BRI     $LaDIV2   # Div2
+$LaLOOP_END:
+	BRI     $LaRETURN_HERE
+$LaDiv_By_Zero:
+$LaResult_Is_Zero:
+	OR      r3,r0,r0 # set result to 0
+$LaRETURN_HERE:
+        # Restore values of CSRs and that of r3 and the divisor and the dividend
+	LWI     r29,r1,0
+	LWI     r30,r1,4
+	LWI     r31,r1,8
+	RTSD    r15,8
+	ADDIK   r1,r1,12
+        .end __udivsi3
+	
diff --git a/gcc/config/microblaze/umodsi3.asm b/gcc/config/microblaze/umodsi3.asm
index 45120cd..fa35833 100644
--- a/gcc/config/microblaze/umodsi3.asm
+++ b/gcc/config/microblaze/umodsi3.asm
@@ -19,6 +19,7 @@
 	
 	.globl	__umodsi3
 	.ent	__umodsi3
+	.type	__umodsi3,@function
 __umodsi3:
 	.frame	r1,0,r15	
 
@@ -87,4 +88,4 @@ $LaRETURN_HERE:
 	rtsd 	r15,8
 	addik 	r1,r1,12
 .end __umodsi3
-	
+	.size	__umodsi3, . - __umodsi3
-- 
1.5.3.8

