From 503edade138365191129f2ce69fd3dcff13f4c08 Mon Sep 17 00:00:00 2001
Message-Id: <503edade138365191129f2ce69fd3dcff13f4c08.1241484432.git.john.williams@petalogix.com>
In-Reply-To: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
References: <930a7bf07b58a3d6a48393a6419b2c958fc9dc2a.1241484427.git.john.williams@petalogix.com>
From: John Williams <john.williams@petalogix.com>
Date: Tue, 28 Apr 2009 14:40:17 +1000
Subject: [PATCH 55/63] microblaze: Fixed CALL_STATIC and "use" rtx for PIC calls

---
 gcc/config/microblaze/microblaze.h      |    2 +-
 gcc/config/microblaze/microblaze.h.orig |   10 ++++++-
 gcc/config/microblaze/microblaze.md     |   43 ++++++++++++++++++++++++++++---
 3 files changed, 48 insertions(+), 7 deletions(-)

diff --git a/gcc/config/microblaze/microblaze.h b/gcc/config/microblaze/microblaze.h
index cdfb100..d04de79 100644
--- a/gcc/config/microblaze/microblaze.h
+++ b/gcc/config/microblaze/microblaze.h
@@ -3213,7 +3213,7 @@ void FN ()
    definition in crtstuff.c */
 #define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)	\
     asm ( SECTION_OP "\n"                               \
-          "\tbralid   r15, " #FUNC "\n\t nop\n"         \
+          "\tbrlid   r15, " #FUNC "\n\t nop\n"         \
           TEXT_SECTION_ASM_OP);
 
 /* #define CTOR_LIST_BEGIN                                 \ */
diff --git a/gcc/config/microblaze/microblaze.h.orig b/gcc/config/microblaze/microblaze.h.orig
index 4006321..cdfb100 100644
--- a/gcc/config/microblaze/microblaze.h.orig
+++ b/gcc/config/microblaze/microblaze.h.orig
@@ -429,7 +429,7 @@ while (0)
 /* ??? The bestGnum will never be passed to the linker, because the gcc driver
    will interpret it as a -b option.  */
 
-#define LINK_SPEC "%{shared:-shared} -relax %{Zxl-mode-xmdstub:-defsym _TEXT_START_ADDR=0x800} \
+#define LINK_SPEC "%{shared:-shared} -N -relax %{Zxl-mode-xmdstub:-defsym _TEXT_START_ADDR=0x800} \
   %{!mxl-gp-opt: -G 0} %{!Wl,-T*: %{!T*: -T xilinx.ld%s}}"
 
 /* Specs for the compiler proper */
@@ -1565,7 +1565,9 @@ contain (16 bit zero-extended integers).
 
 #define RETURN_ADDR_RTX(count, frame)			\
   ((count == 0)						\
-   ? gen_rtx_MEM (Pmode, gen_rtx_REG (Pmode, RETURN_ADDRESS_POINTER_REGNUM))\
+   ?  gen_rtx_PLUS (Pmode,                              \
+                    get_hard_reg_initial_val(Pmode, MB_ABI_SUB_RETURN_ADDR_REGNUM), \
+                    GEN_INT (8))                        \
    : (rtx) 0)
 
 /* Structure to be filled in by compute_frame_size with register
@@ -2849,6 +2851,10 @@ do {									\
     fprintf (STREAM, "\t%s\t%sL%d-%sLS%d\n",				\
 	     ".gpword",                                                 \
 	     LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);	\
+  else if (flag_pic == 2)                                               \
+    fprintf (STREAM, "\t%s\t%sL%d@GOTOFF\n",                            \
+	     ".gpword",                                                 \
+	     LOCAL_LABEL_PREFIX, VALUE);				\
   else                                                                  \
     fprintf (STREAM, "\t%s\t%sL%d\n",					\
 	     ".gpword",                                                 \
diff --git a/gcc/config/microblaze/microblaze.md b/gcc/config/microblaze/microblaze.md
index 78f0c73..cd797d6 100644
--- a/gcc/config/microblaze/microblaze.md
+++ b/gcc/config/microblaze/microblaze.md
@@ -3340,6 +3340,11 @@
                 emit_insn (RTVEC_ELT (adjust, i));
 	}
 
+        if (GET_CODE (XEXP (operands[0], 0)) == UNSPEC)
+          emit_call_insn (gen_call_internal_plt0 (operands[0], operands[1],
+                                            gen_rtx_REG (SImode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM),
+                                            pic_offset_table_rtx));
+        else
         emit_call_insn (gen_call_internal0 (operands[0], operands[1],
                                             gen_rtx_REG (SImode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM)));
 
@@ -3358,10 +3363,22 @@
   }
 )
  
+(define_expand "call_internal_plt0"
+  [(parallel [(call (match_operand 0 "" "")
+		    (match_operand 1 "" ""))
+             (clobber (match_operand:SI 2 "" ""))
+             (use (match_operand:SI 3 "" ""))])]
+  ""
+  {
+    /*      fprintf(stderr,"expand \t call_internal_plt0  \n");*/
+  }
+)
+ 
 (define_insn "call_internal_plt"
   [(call (mem (match_operand:SI 0 "call_insn_plt_operand" ""))
 	 (match_operand:SI 1 "" "i"))
-  (clobber (reg:SI R_SR))]
+  (clobber (reg:SI R_SR))
+  (use (reg:SI R_GOT))]
   "flag_pic"
   {
     register rtx target = operands[0];
@@ -3445,8 +3462,13 @@
         if (GET_CODE (operands[0]) == PARALLEL)
             operands[0] = XEXP (XVECEXP (operands[0], 0, 0), 0);
 
-        emit_call_insn (gen_call_value_internal0 (operands[0], operands[1], operands[2],
-		        gen_rtx_REG (SImode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM)));
+        if (GET_CODE (XEXP (operands[1], 0)) == UNSPEC)
+          emit_call_insn (gen_call_value_intern_plt0 (operands[0], operands[1], operands[2],
+                          gen_rtx_REG (SImode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM),
+                          pic_offset_table_rtx));
+        else
+          emit_call_insn (gen_call_value_internal0 (operands[0], operands[1], operands[2],
+                          gen_rtx_REG (SImode, GP_REG_FIRST + MB_ABI_SUB_RETURN_ADDR_REGNUM)));
 
         DONE;
     }
@@ -3493,11 +3515,24 @@
   }
 )
 
+(define_expand "call_value_intern_plt0"
+  [(parallel[(set (match_operand 0 "" "")
+                  (call (match_operand 1 "" "")
+                        (match_operand 2 "" "")))
+             (clobber (match_operand:SI 3 "" ""))
+             (use (match_operand:SI 4 "" ""))])]
+  "flag_pic"
+  { 
+    /* fprintf(stderr,"expand \t call_value_intern_plt0  \n"); */
+  }
+)
+
 (define_insn "call_value_intern_plt"
   [(parallel[(set (match_operand 0 "register_operand" "=df")
                   (call (mem (match_operand:SI 1 "call_insn_plt_operand" ""))
                         (match_operand:SI 2 "" "i")))
-             (clobber (match_operand:SI 3 "register_operand" "=d"))])]
+             (clobber (match_operand:SI 3 "register_operand" "=d"))
+             (use (match_operand:SI 4 "register_operand"))])]
   "flag_pic"
   { 
     register rtx target = operands[1];
-- 
1.5.3.8

